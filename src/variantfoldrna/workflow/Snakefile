################################################################################
# VariantFoldRNA: A Snakemake Pipeline for RiboSNitch Prediction
#
# Author: Kobie Kirven
# Email: kjk6173@psu.edu
#
# Assmann and Bevilacqua Labs
# The Pennsylvania State University
################################################################################

# Import the python modules:
import os
import subprocess
import sys

# Check to make sure that, if the user is running RNAsnp, they use 
# a flanking lenth that is between 100 and 800 nt in intervals of 50
if config['ribosnitch_prediction_tool'].lower() == 'rnasnp:p-value' or config['ribosnitch_prediction_tool'].lower() == 'rnasnp:dist':
    flanking = config['flank_len']
    if flanking < 100 or flanking > 800 or flanking % 50 != 0:
        # Print in red that the flanking length is not within the acceptable range
        print("\033[91mError: The flanking length must be between 100 and 800 nt in intervals of 50.\033[0m")
        # Exit the program
        sys.exit(1)


# if the user does not specify the number of chunks, let's estimate it by the size of 
# the input file
if config['chunks'] == -1:
    # get the size of the input file
    size = os.path.getsize(config['vcf'])
    # estimate the number of chunks
    config['chunks'] = int(size / 10000000) + 1
    
    # Print in blue the number of chunks that will be used
    print("\033[94mThe number of chunks to be used is based on the size of your VCF: " + str(config['chunks']) + "\033[0m")


# -- Import common rules -- #
if config['csv'] == "none":
    include: "rules/chunk.smk"
    include: "rules/vep.smk"
    include: "rules/vcf_header.smk"
    include: "rules/neutral_background.smk"

# Load the rules for the appropriate prediction tool
if config["ribosnitch_prediction_tool"].lower() == "snpfold":
    include: "rules/snpfold.smk"

elif config["ribosnitch_prediction_tool"].lower() == "riprap":
    include: "rules/riprap.smk"

elif config["ribosnitch_prediction_tool"].lower() == "rnasnp:p-value" or config["ribosnitch_prediction_tool"].lower() == "rnasnp:dist":
    include: "rules/rnasnp.smk"

elif config["ribosnitch_prediction_tool"].lower() == "remurna":
    include: "rules/remurna.smk"

else:
    raise ValueError("The ribosnitch prediction tool is not recognized. Please check the config file and try again.")

    
########################################################
# If the user would like the spliced cDNA, include the
# appropriate rules
########################################################
if config["spliced"] == True:
    include: "rules/extract_seqs_spliced.smk"

else:
    include: "rules/extract_seqs.smk"


###########################################################
# If the user would like to perform riboSNitch prediction
# over a range of temperatures, adjust the output
# accordingly
###########################################################
if "@" in str(config["temperature"]):
    start_stop = str(config["temperature"]).split("@")
    if float(start_stop[1]) < float(start_stop[0]):
        print("\033[91m\nError: The ending temperature is less than the starting temperature\n")
        os._exit(1)
    temperature_range = [float(start_stop[0])]

    steps = abs(round((float(start_stop[1]) - float(start_stop[0])) / float(config["temp_step"]))) + 1

    for x in range(steps):
        if round((temperature_range[-1] + float(config["temp_step"])),3) <=  round((temperature_range[-1] + float(config["temp_step"]))):
            temperature_range.append(round(temperature_range[-1]+ float(config["temp_step"]),4))
else:
    temperature_range = [config["temperature"]]
print("\033[94mWill predict riboSNitches at the following temperatures:", ",".join([str(x) for x in temperature_range])+ "\033[0m")
#############################################
# Create the final input list
#############################################
final_input = []

if config['csv'] != "none":
    for temp in temperature_range:
        final_input.append(f"{config['out_dir']}/ribosnitch_predictions_csv/combined_ribosnitch_prediction_{temp}.txt")

else:
    for temp in temperature_range:
        # If the user just wants the riboSNitch predictions without the null predictions
        final_input.append(
            f"{config['out_dir']}/ribosnitch_predictions/combined_ribosnitch_prediction_{temp}.txt"
        )


#######################
#  --  Pipeline  --   #
#######################

rule all:
    input:
        final_input,
