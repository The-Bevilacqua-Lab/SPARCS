################################################################################
# VariantFoldRNA: A Snakemake Pipeline for RiboSNitch Prediction
#
# Author: Kobie Kirven
# Email: kjk6173@psu.edu
#
# Assmann and Bevilacqua Labs
# The Pennsylvania State University
################################################################################

# Import the python modules:
import os
import subprocess

# Check to make sure that, if the user is running RNAsnp, they use 
# a flanking lenth that is between 100 and 800 nt in intervals of 50
if "rnasnp" in location:
    flanking = int(location.split("flanking_")[1].split("_")[0])
    if flanking < 100 or flanking > 800 or flanking % 50 != 0:
        raise ValueError("The flanking length must be between 100 and 800 in intervals of 50.")


# if the user does not specify the number of chunks, let's estimate it by the size of 
# the input file
if config['chunks'] == -1:
    # get the size of the input file
    size = os.path.getsize(input_file)
    # estimate the number of chunks
    config['chunks'] = int(size / 10000000) + 1


# -- Import common rules -- #
if config['csv'] == "none":
    include: "rules/chunk.smk"
    include: "rules/vep.smk"
    include: "rules/vcf_header.smk"
    include: "rules/neutral_background.smk"

# Load the rules for the appropriate prediction tool
if config["ribosnitch_prediction_tool"].lower() == "snpfold":
    include: "rules/snpfold.smk"

elif config["ribosnitch_prediction_tool"].lower() == "riprap":
    include: "rules/riprap.smk"

elif config["ribosnitch_prediction_tool"].lower() == "rnasnp:p-value" or config["ribosnitch_prediction_tool"].lower() == "rnasnp:dist":
    include: "rules/rnasnp.smk"

elif config["ribosnitch_prediction_tool"].lower() == "remurna":
    include: "rules/remurna.smk"

else:
    raise ValueError("The ribosnitch prediction tool is not recognized. Please check the config file and try again.")

    
########################################################
# If the user would like the spliced cDNA, include the
# appropriate rules
########################################################
if config["spliced"] == True:
    include: "rules/extract_seqs_spliced.smk"

else:
    include: "rules/extract_seqs.smk"


###########################################################
# If the user would like to perform riboSNitch prediction
# over a range of temperatures, adjust the output
# accordingly
###########################################################
if "@" in str(config["temperature"]):
    start_stop = str(config["temperature"]).split("@")
    temperature_range = range(
        int(start_stop[0]), int(start_stop[1]) + 1, int(config["temp_step"])
    )
else:
    temperature_range = [config["temperature"]]

#############################################
# Create the final input list
#############################################
final_input = []

if config['csv'] != "none":
    for temp in temperature_range:
        final_input.append(f"{config['out_dir']}/ribosnitch_predictions_csv/combined_ribosnitch_prediction_{temp}.txt")

else:
    for temp in temperature_range:
        # If the user just wants the riboSNitch predictions without the null predictions
        final_input.append(
            f"{config['out_dir']}/ribosnitch_predictions/combined_ribosnitch_prediction_{temp}.txt"
        )

        # If the user just wants the null predictions without the riboSNitch predictions for the natural variants
        # elif config["null_only"] == True:
        #     final_input.append(
        #         f"{config['out_dir']}/{config['out_name']}/null_model/combined_ribosnitch_prediction_null_{temp}.txt"
        #     )

        # elif config['other_alts_only'] == True:
        #     final_input.append(
        #         f"{config['out_dir']}/{config['out_name']}/ribosnitch_predictions_other_alts/combined_ribosnitch_prediction_{temp}.txt"
        #     )

        # # If the user wants both the riboSNitch predictions and the null predictions
        # else:
        #     final_input.append(
        #         f"{config['out_dir']}/{config['out_name']}/ribosnitch_predictions/combined_ribosnitch_prediction_{temp}.txt"
        #     )
        #     final_input.append(
        #         f"{config['out_dir']}/{config['out_name']}/ribosnitch_predictions_null/combined_ribosnitch_prediction_{temp}.txt"
            

# else:
#     final_input = [f"{config['out_dir']}/{config['out_name']}/temp/intergenic_flank_seq.txt"]


#######################
#  --  Pipeline  --   #
#######################

rule all:
    input:
        final_input,
